# patient/models.py

from django.db import models
from django.conf import settings
from datetime import date
from django.core.exceptions import ValidationError
import re
from doctor.models import Doctor


# Validate mobile number
def validate_mobile(value):
    if value and not re.match(r'^\+?[0-9]*$', value):
        raise ValidationError(f"{value} is not a valid phone number.")

class Patient(models.Model):
    # --- ربط Patient بحساب User (خليه اختياري) ---
    user = models.OneToOneField(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        related_name='patient',
        verbose_name='User Account',
        null=True,
        blank=True
    )

    # --- Basic Information ---
    full_name = models.CharField(max_length=100, verbose_name="Full Name")
    date_of_birth = models.DateField(null=True, blank=True, verbose_name="Date of Birth")
    mobile = models.CharField(
        max_length=20,
        null=True,
        blank=True,
        verbose_name="Mobile Number",
        validators=[validate_mobile]
    )
    address = models.CharField(max_length=255, null=True, blank=True, verbose_name="Address")
    email = models.EmailField(max_length=100, null=True, blank=True, verbose_name="Email Address")

    GENDER_CHOICES = [('M', 'Male'), ('F', 'Female')]
    gender = models.CharField(
        max_length=1,
        choices=GENDER_CHOICES,
        null=True,
        blank=True,
        verbose_name="Gender"
    )

    # --- Medical Information ---
    past_medical_history = models.TextField(null=True, blank=True, verbose_name="Past Medical History")
    drug_history = models.TextField(null=True, blank=True, verbose_name="Drug History")
    investigations = models.TextField(null=True, blank=True, verbose_name="Investigations")

    # --- Diabetes Prediction Fields ---
    bmi = models.FloatField(null=True, blank=True, verbose_name="BMI")
    hbA1c_level = models.FloatField(null=True, blank=True, verbose_name="HbA1c Level")
    blood_glucose_level = models.FloatField(null=True, blank=True, verbose_name="Blood Glucose Level")
    hypertension = models.BooleanField(default=False, verbose_name="Has Hypertension?")
    heart_disease = models.BooleanField(default=False, verbose_name="Has Heart Disease?")
    smoking_history = models.CharField(
        max_length=50,
        null=True,
        blank=True,
        choices=[
            ('never', 'Never'),
            ('former', 'Former'),
            ('current', 'Current'),
            ('not available', 'Not Available'),
            ('No Info', 'No Info')
        ],
        verbose_name="Smoking History"
    )
    race = models.CharField(
        max_length=50,
        null=True,
        blank=True,
        choices=[
            ('AfricanAmerican', 'African American'),
            ('Asian', 'Asian'),
            ('Caucasian', 'Caucasian'),
            ('Hispanic', 'Hispanic'),
            ('Other', 'Other'),
        ],
        verbose_name="Race"
    )
    diabetes_prediction = models.CharField(
        max_length=50,
        null=True,
        blank=True,
        verbose_name="Diabetes Prediction",
        help_text="Auto-generated by AI model"
    )

    # --- Additional Notes ---
    clinical_notes = models.TextField(
        null=True,
        blank=True,
        verbose_name="Clinical Notes",
        help_text="Generated or added by doctor"
    )

    # --- Link to Doctor ---
    # doctor = models.ForeignKey(
    #     settings.AUTH_USER_MODEL,
    #     on_delete=models.SET_NULL,
    #     null=True,
    #     blank=True,
    #     limit_choices_to={'role': 'doctor'},
    #     related_name='my_patients',
    #     verbose_name="Assigned Doctor"
    # )

    doctor = models.ForeignKey(
    Doctor,
    on_delete=models.SET_NULL,
    null=True,
    blank=True,
    verbose_name="Assigned Doctor"
)

    # --- Record Creation Time ---
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="Created At")

    class Meta:
        verbose_name = "Patient"
        verbose_name_plural = "Patients"
        ordering = ["full_name"]

    @property
    def age(self):
        """
        Compute age automatically if date_of_birth is set.
        """
        if not self.date_of_birth:
            return None
        today = date.today()
        years = today.year - self.date_of_birth.year
        if (today.month, today.day) < (self.date_of_birth.month, self.date_of_birth.day):
            years -= 1
        return years

    def __str__(self):
        return self.full_name
